/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BlazexInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burnFeeOnBuy"
      | "burnFeeOnSell"
      | "changeMarketingWallet"
      | "claimStuckTokens"
      | "decimals"
      | "decreaseAllowance"
      | "deliver"
      | "enableTrading"
      | "enableWalletToWalletTransferWithoutFee"
      | "excludeFromFees"
      | "excludeFromReward"
      | "includeInReward"
      | "increaseAllowance"
      | "isExcludedFromFee"
      | "isExcludedFromMaxTransaction"
      | "isExcludedFromReward"
      | "liquidityFeeonBuy"
      | "liquidityFeeonSell"
      | "marketingFeeonBuy"
      | "marketingFeeonSell"
      | "marketingWallet"
      | "maxTransactionAmountBuy"
      | "maxTransactionAmountSell"
      | "maxTransactionLimitEnabled"
      | "name"
      | "owner"
      | "reflectionFromToken"
      | "renounceOwnership"
      | "setBuyFeePercentages"
      | "setEnableMaxTransactionLimit"
      | "setExcludeFromMaxTransactionLimit"
      | "setMaxTransactionAmounts"
      | "setSellFeePercentages"
      | "setSwapEnabled"
      | "setSwapTokensAtAmount"
      | "swapEnabled"
      | "swapTokensAtAmount"
      | "symbol"
      | "taxFeeonBuy"
      | "taxFeeonSell"
      | "tokenFromReflection"
      | "totalReflectionDistributed"
      | "totalSupply"
      | "tradingEnabled"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "walletToWalletTransferWithoutFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BuyFeesChanged"
      | "ExcludeFromFees"
      | "ExcludedFromMaxTransactionLimit"
      | "MarketingWalletChanged"
      | "MaxTransactionLimitAmountChanged"
      | "MaxTransactionLimitStateChanged"
      | "OwnershipTransferred"
      | "SellFeesChanged"
      | "SwapAndLiquify"
      | "SwapAndSendMarketing"
      | "SwapEnabledUpdated"
      | "SwapTokensAtAmountUpdated"
      | "Transfer"
      | "WalletToWalletTransferWithoutFeeEnabled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFeeOnBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnFeeOnSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeMarketingWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStuckTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deliver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableWalletToWalletTransferWithoutFee",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromMaxTransaction",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFeeonBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFeeonSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingFeeonBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingFeeonSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmountBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmountSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionLimitEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyFeePercentages",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableMaxTransactionLimit",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcludeFromMaxTransactionLimit",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTransactionAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellFeePercentages",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapTokensAtAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxFeeonBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxFeeonSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReflectionDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "walletToWalletTransferWithoutFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnFeeOnBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnFeeOnSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStuckTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableWalletToWalletTransferWithoutFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFeeonBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFeeonSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingFeeonBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingFeeonSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmountBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmountSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionLimitEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyFeePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableMaxTransactionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcludeFromMaxTransactionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTransactionAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellFeePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxFeeonBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxFeeonSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReflectionDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletToWalletTransferWithoutFee",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyFeesChangedEvent {
  export type InputTuple = [
    taxFee: BigNumberish,
    liquidityFee: BigNumberish,
    marketingFee: BigNumberish
  ];
  export type OutputTuple = [
    taxFee: bigint,
    liquidityFee: bigint,
    marketingFee: bigint
  ];
  export interface OutputObject {
    taxFee: bigint;
    liquidityFee: bigint;
    marketingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeFromFeesEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludedFromMaxTransactionLimitEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketingWalletChangedEvent {
  export type InputTuple = [marketingWallet: AddressLike];
  export type OutputTuple = [marketingWallet: string];
  export interface OutputObject {
    marketingWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTransactionLimitAmountChangedEvent {
  export type InputTuple = [
    maxTransactionAmountBuy: BigNumberish,
    maxTransactionAmountSell: BigNumberish
  ];
  export type OutputTuple = [
    maxTransactionAmountBuy: bigint,
    maxTransactionAmountSell: bigint
  ];
  export interface OutputObject {
    maxTransactionAmountBuy: bigint;
    maxTransactionAmountSell: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTransactionLimitStateChangedEvent {
  export type InputTuple = [maxTransactionLimit: boolean];
  export type OutputTuple = [maxTransactionLimit: boolean];
  export interface OutputObject {
    maxTransactionLimit: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellFeesChangedEvent {
  export type InputTuple = [
    taxFee: BigNumberish,
    liquidityFee: BigNumberish,
    marketingFee: BigNumberish
  ];
  export type OutputTuple = [
    taxFee: bigint,
    liquidityFee: bigint,
    marketingFee: bigint
  ];
  export interface OutputObject {
    taxFee: bigint;
    liquidityFee: bigint;
    marketingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEvent {
  export type InputTuple = [
    tokensSwapped: BigNumberish,
    bnbReceived: BigNumberish,
    tokensIntoLiqudity: BigNumberish
  ];
  export type OutputTuple = [
    tokensSwapped: bigint,
    bnbReceived: bigint,
    tokensIntoLiqudity: bigint
  ];
  export interface OutputObject {
    tokensSwapped: bigint;
    bnbReceived: bigint;
    tokensIntoLiqudity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndSendMarketingEvent {
  export type InputTuple = [tokensSwapped: BigNumberish, bnbSend: BigNumberish];
  export type OutputTuple = [tokensSwapped: bigint, bnbSend: bigint];
  export interface OutputObject {
    tokensSwapped: bigint;
    bnbSend: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEnabledUpdatedEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapTokensAtAmountUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletToWalletTransferWithoutFeeEnabledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Blazex extends BaseContract {
  connect(runner?: ContractRunner | null): Blazex;
  waitForDeployment(): Promise<this>;

  interface: BlazexInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burnFeeOnBuy: TypedContractMethod<[], [bigint], "view">;

  burnFeeOnSell: TypedContractMethod<[], [bigint], "view">;

  changeMarketingWallet: TypedContractMethod<
    [_marketingWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  claimStuckTokens: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deliver: TypedContractMethod<[tAmount: BigNumberish], [void], "nonpayable">;

  enableTrading: TypedContractMethod<[], [void], "nonpayable">;

  enableWalletToWalletTransferWithoutFee: TypedContractMethod<
    [enable: boolean],
    [void],
    "nonpayable"
  >;

  excludeFromFees: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  excludeFromReward: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  includeInReward: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isExcludedFromFee: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedFromMaxTransaction: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedFromReward: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  liquidityFeeonBuy: TypedContractMethod<[], [bigint], "view">;

  liquidityFeeonSell: TypedContractMethod<[], [bigint], "view">;

  marketingFeeonBuy: TypedContractMethod<[], [bigint], "view">;

  marketingFeeonSell: TypedContractMethod<[], [bigint], "view">;

  marketingWallet: TypedContractMethod<[], [string], "view">;

  maxTransactionAmountBuy: TypedContractMethod<[], [bigint], "view">;

  maxTransactionAmountSell: TypedContractMethod<[], [bigint], "view">;

  maxTransactionLimitEnabled: TypedContractMethod<[], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  reflectionFromToken: TypedContractMethod<
    [tAmount: BigNumberish, deductTransferFee: boolean],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBuyFeePercentages: TypedContractMethod<
    [
      _taxFeeonBuy: BigNumberish,
      _liquidityFeeonBuy: BigNumberish,
      _marketingFeeonBuy: BigNumberish,
      _burnFeeOnBuy: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setEnableMaxTransactionLimit: TypedContractMethod<
    [enable: boolean],
    [void],
    "nonpayable"
  >;

  setExcludeFromMaxTransactionLimit: TypedContractMethod<
    [account: AddressLike, exclude: boolean],
    [void],
    "nonpayable"
  >;

  setMaxTransactionAmounts: TypedContractMethod<
    [
      _maxTransactionAmountBuy: BigNumberish,
      _maxTransactionAmountSell: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setSellFeePercentages: TypedContractMethod<
    [
      _taxFeeonSell: BigNumberish,
      _liquidityFeeonSell: BigNumberish,
      _marketingFeeonSell: BigNumberish,
      _burnFeeOnSell: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setSwapEnabled: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  setSwapTokensAtAmount: TypedContractMethod<
    [newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapEnabled: TypedContractMethod<[], [boolean], "view">;

  swapTokensAtAmount: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  taxFeeonBuy: TypedContractMethod<[], [bigint], "view">;

  taxFeeonSell: TypedContractMethod<[], [bigint], "view">;

  tokenFromReflection: TypedContractMethod<
    [rAmount: BigNumberish],
    [bigint],
    "view"
  >;

  totalReflectionDistributed: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradingEnabled: TypedContractMethod<[], [boolean], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  walletToWalletTransferWithoutFee: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnFeeOnBuy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnFeeOnSell"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeMarketingWallet"
  ): TypedContractMethod<[_marketingWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimStuckTokens"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deliver"
  ): TypedContractMethod<[tAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableTrading"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableWalletToWalletTransferWithoutFee"
  ): TypedContractMethod<[enable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "excludeFromFees"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeFromReward"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "includeInReward"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isExcludedFromFee"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromMaxTransaction"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromReward"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidityFeeonBuy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityFeeonSell"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketingFeeonBuy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketingFeeonSell"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketingWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxTransactionAmountBuy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTransactionAmountSell"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTransactionLimitEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reflectionFromToken"
  ): TypedContractMethod<
    [tAmount: BigNumberish, deductTransferFee: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBuyFeePercentages"
  ): TypedContractMethod<
    [
      _taxFeeonBuy: BigNumberish,
      _liquidityFeeonBuy: BigNumberish,
      _marketingFeeonBuy: BigNumberish,
      _burnFeeOnBuy: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEnableMaxTransactionLimit"
  ): TypedContractMethod<[enable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExcludeFromMaxTransactionLimit"
  ): TypedContractMethod<
    [account: AddressLike, exclude: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxTransactionAmounts"
  ): TypedContractMethod<
    [
      _maxTransactionAmountBuy: BigNumberish,
      _maxTransactionAmountSell: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSellFeePercentages"
  ): TypedContractMethod<
    [
      _taxFeeonSell: BigNumberish,
      _liquidityFeeonSell: BigNumberish,
      _marketingFeeonSell: BigNumberish,
      _burnFeeOnSell: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapEnabled"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapTokensAtAmount"
  ): TypedContractMethod<[newAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapTokensAtAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxFeeonBuy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taxFeeonSell"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenFromReflection"
  ): TypedContractMethod<[rAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReflectionDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "walletToWalletTransferWithoutFee"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BuyFeesChanged"
  ): TypedContractEvent<
    BuyFeesChangedEvent.InputTuple,
    BuyFeesChangedEvent.OutputTuple,
    BuyFeesChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeFromFees"
  ): TypedContractEvent<
    ExcludeFromFeesEvent.InputTuple,
    ExcludeFromFeesEvent.OutputTuple,
    ExcludeFromFeesEvent.OutputObject
  >;
  getEvent(
    key: "ExcludedFromMaxTransactionLimit"
  ): TypedContractEvent<
    ExcludedFromMaxTransactionLimitEvent.InputTuple,
    ExcludedFromMaxTransactionLimitEvent.OutputTuple,
    ExcludedFromMaxTransactionLimitEvent.OutputObject
  >;
  getEvent(
    key: "MarketingWalletChanged"
  ): TypedContractEvent<
    MarketingWalletChangedEvent.InputTuple,
    MarketingWalletChangedEvent.OutputTuple,
    MarketingWalletChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTransactionLimitAmountChanged"
  ): TypedContractEvent<
    MaxTransactionLimitAmountChangedEvent.InputTuple,
    MaxTransactionLimitAmountChangedEvent.OutputTuple,
    MaxTransactionLimitAmountChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTransactionLimitStateChanged"
  ): TypedContractEvent<
    MaxTransactionLimitStateChangedEvent.InputTuple,
    MaxTransactionLimitStateChangedEvent.OutputTuple,
    MaxTransactionLimitStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SellFeesChanged"
  ): TypedContractEvent<
    SellFeesChangedEvent.InputTuple,
    SellFeesChangedEvent.OutputTuple,
    SellFeesChangedEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquify"
  ): TypedContractEvent<
    SwapAndLiquifyEvent.InputTuple,
    SwapAndLiquifyEvent.OutputTuple,
    SwapAndLiquifyEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndSendMarketing"
  ): TypedContractEvent<
    SwapAndSendMarketingEvent.InputTuple,
    SwapAndSendMarketingEvent.OutputTuple,
    SwapAndSendMarketingEvent.OutputObject
  >;
  getEvent(
    key: "SwapEnabledUpdated"
  ): TypedContractEvent<
    SwapEnabledUpdatedEvent.InputTuple,
    SwapEnabledUpdatedEvent.OutputTuple,
    SwapEnabledUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapTokensAtAmountUpdated"
  ): TypedContractEvent<
    SwapTokensAtAmountUpdatedEvent.InputTuple,
    SwapTokensAtAmountUpdatedEvent.OutputTuple,
    SwapTokensAtAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WalletToWalletTransferWithoutFeeEnabled"
  ): TypedContractEvent<
    WalletToWalletTransferWithoutFeeEnabledEvent.InputTuple,
    WalletToWalletTransferWithoutFeeEnabledEvent.OutputTuple,
    WalletToWalletTransferWithoutFeeEnabledEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BuyFeesChanged(uint256,uint256,uint256)": TypedContractEvent<
      BuyFeesChangedEvent.InputTuple,
      BuyFeesChangedEvent.OutputTuple,
      BuyFeesChangedEvent.OutputObject
    >;
    BuyFeesChanged: TypedContractEvent<
      BuyFeesChangedEvent.InputTuple,
      BuyFeesChangedEvent.OutputTuple,
      BuyFeesChangedEvent.OutputObject
    >;

    "ExcludeFromFees(address,bool)": TypedContractEvent<
      ExcludeFromFeesEvent.InputTuple,
      ExcludeFromFeesEvent.OutputTuple,
      ExcludeFromFeesEvent.OutputObject
    >;
    ExcludeFromFees: TypedContractEvent<
      ExcludeFromFeesEvent.InputTuple,
      ExcludeFromFeesEvent.OutputTuple,
      ExcludeFromFeesEvent.OutputObject
    >;

    "ExcludedFromMaxTransactionLimit(address,bool)": TypedContractEvent<
      ExcludedFromMaxTransactionLimitEvent.InputTuple,
      ExcludedFromMaxTransactionLimitEvent.OutputTuple,
      ExcludedFromMaxTransactionLimitEvent.OutputObject
    >;
    ExcludedFromMaxTransactionLimit: TypedContractEvent<
      ExcludedFromMaxTransactionLimitEvent.InputTuple,
      ExcludedFromMaxTransactionLimitEvent.OutputTuple,
      ExcludedFromMaxTransactionLimitEvent.OutputObject
    >;

    "MarketingWalletChanged(address)": TypedContractEvent<
      MarketingWalletChangedEvent.InputTuple,
      MarketingWalletChangedEvent.OutputTuple,
      MarketingWalletChangedEvent.OutputObject
    >;
    MarketingWalletChanged: TypedContractEvent<
      MarketingWalletChangedEvent.InputTuple,
      MarketingWalletChangedEvent.OutputTuple,
      MarketingWalletChangedEvent.OutputObject
    >;

    "MaxTransactionLimitAmountChanged(uint256,uint256)": TypedContractEvent<
      MaxTransactionLimitAmountChangedEvent.InputTuple,
      MaxTransactionLimitAmountChangedEvent.OutputTuple,
      MaxTransactionLimitAmountChangedEvent.OutputObject
    >;
    MaxTransactionLimitAmountChanged: TypedContractEvent<
      MaxTransactionLimitAmountChangedEvent.InputTuple,
      MaxTransactionLimitAmountChangedEvent.OutputTuple,
      MaxTransactionLimitAmountChangedEvent.OutputObject
    >;

    "MaxTransactionLimitStateChanged(bool)": TypedContractEvent<
      MaxTransactionLimitStateChangedEvent.InputTuple,
      MaxTransactionLimitStateChangedEvent.OutputTuple,
      MaxTransactionLimitStateChangedEvent.OutputObject
    >;
    MaxTransactionLimitStateChanged: TypedContractEvent<
      MaxTransactionLimitStateChangedEvent.InputTuple,
      MaxTransactionLimitStateChangedEvent.OutputTuple,
      MaxTransactionLimitStateChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SellFeesChanged(uint256,uint256,uint256)": TypedContractEvent<
      SellFeesChangedEvent.InputTuple,
      SellFeesChangedEvent.OutputTuple,
      SellFeesChangedEvent.OutputObject
    >;
    SellFeesChanged: TypedContractEvent<
      SellFeesChangedEvent.InputTuple,
      SellFeesChangedEvent.OutputTuple,
      SellFeesChangedEvent.OutputObject
    >;

    "SwapAndLiquify(uint256,uint256,uint256)": TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;
    SwapAndLiquify: TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;

    "SwapAndSendMarketing(uint256,uint256)": TypedContractEvent<
      SwapAndSendMarketingEvent.InputTuple,
      SwapAndSendMarketingEvent.OutputTuple,
      SwapAndSendMarketingEvent.OutputObject
    >;
    SwapAndSendMarketing: TypedContractEvent<
      SwapAndSendMarketingEvent.InputTuple,
      SwapAndSendMarketingEvent.OutputTuple,
      SwapAndSendMarketingEvent.OutputObject
    >;

    "SwapEnabledUpdated(bool)": TypedContractEvent<
      SwapEnabledUpdatedEvent.InputTuple,
      SwapEnabledUpdatedEvent.OutputTuple,
      SwapEnabledUpdatedEvent.OutputObject
    >;
    SwapEnabledUpdated: TypedContractEvent<
      SwapEnabledUpdatedEvent.InputTuple,
      SwapEnabledUpdatedEvent.OutputTuple,
      SwapEnabledUpdatedEvent.OutputObject
    >;

    "SwapTokensAtAmountUpdated(uint256)": TypedContractEvent<
      SwapTokensAtAmountUpdatedEvent.InputTuple,
      SwapTokensAtAmountUpdatedEvent.OutputTuple,
      SwapTokensAtAmountUpdatedEvent.OutputObject
    >;
    SwapTokensAtAmountUpdated: TypedContractEvent<
      SwapTokensAtAmountUpdatedEvent.InputTuple,
      SwapTokensAtAmountUpdatedEvent.OutputTuple,
      SwapTokensAtAmountUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WalletToWalletTransferWithoutFeeEnabled(bool)": TypedContractEvent<
      WalletToWalletTransferWithoutFeeEnabledEvent.InputTuple,
      WalletToWalletTransferWithoutFeeEnabledEvent.OutputTuple,
      WalletToWalletTransferWithoutFeeEnabledEvent.OutputObject
    >;
    WalletToWalletTransferWithoutFeeEnabled: TypedContractEvent<
      WalletToWalletTransferWithoutFeeEnabledEvent.InputTuple,
      WalletToWalletTransferWithoutFeeEnabledEvent.OutputTuple,
      WalletToWalletTransferWithoutFeeEnabledEvent.OutputObject
    >;
  };
}
